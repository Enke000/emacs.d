#+STARTUP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  ;;hide startup massage
  (setq inhibit-startup-message t)
  ;; close
  (setq make-backup-files nil)
  ;;hide tool bar
  (tool-bar-mode -1)
  ;; use y-n-p over yes-no-p
  (fset 'yes-or-no-p 'y-or-n-p)
  ;;reload buffer use F5
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;;list buffers
  (defalias 'list-buffers 'ibuffer)
  ;;set command-key to meta
  (if (eq system-type 'darwin)
      (progn (setq mac-option-modifier 'super)
             (setq mac-command-modifier 'meta)))
  ;; turn off Simultaneous Editing
  (setq create-lockfiles nil)

  ;; all backups goto ~/.backups instead in the current directory
  (setq backup-by-copying t
        backup-directory-alist
        '(("." . "~/.emacs.d/backup"))
        delete-old-versions t
        kept-new-versions 3
        kept-old-versions 1
        version-control t)

  ;;auto-save
  (setq-default auto-save-timeout 15) ; 15秒无动作,自动保存
  (setq-default auto-save-interval 100) ; 100个字符间隔, 自动保存

  ;;设置窗口位置为屏库左上角(0,0)
  (set-frame-position (selected-frame) 0 0)
  ;;设置宽和高
  (set-frame-width (selected-frame) 170)
  (set-frame-height (selected-frame) 80)

  ;; 最大化窗口
  ;;(add-to-list 'default-frame-alist '(fullscreen . fullboth))
  ;;(add-hook 'window-setup-hook 'toggle-frame-maximized t)
  ;;(add-hook 'window-setup-hook 'toggle-frame-fullscreen t)

#+END_SRC
* basis
#+BEGIN_SRC emacs-lisp
  ;;括号补全
  (electric-pair-mode t)
  ;;自动换行
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  ;;开启行号
  (global-linum-mode t)
#+END_SRC

* zenburn theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))
  #+END_SRC
* Misc packages
  - global-hl-line-mode highlight the line.
  - beacon find cursor easier.
  - hungry-delete can delete all black.
  - expand region make selete easier, use C-= to expand selete area.
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ;;(setq beacon-color "#666600")
      )

    (setq save-interprogram-paste-before-kill t)

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)
  #+END_SRC

* org-mode stuff
  useing org-bullets, can show outline as bullets in org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))

    ;;key bind and some stuff
    (global-set-key "\C-ca" 'org-agenda)
    (setq org-agenda-start-on-weekday nil)
    ;;load agenda files
    (setq org-agenda-files (list "~/Dropbox/org/*.org"))

    ;;use org-ac auto-complete for org
    (use-package org-ac
      :ensure t
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)
              ))
        ;;set key bind to C-c c
    (global-set-key (kbd "C-c c") 'org-capture)

    ;;set org capture templates
    (setq org-capture-templates
          '(("l" "Link" entry (file+headline "~/Dropbox/org/inbox.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("t" "To-Do Item" entry (file+headline "~/Dropbox/org/inbox.org" "To-Do")
             "* TODO %?\n%u" :prepend t)
            ("n" "Note" entry (file+headline "~/Dropbox/org/inbox.org" "Notes")
             "* %u %? " :prepend t)
            ))

    ;;images support
    ;; (use-package org-download
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'dired-mode-hook 'org-download-enable)
    ;;   (setq org-download-heading-lvl nil)
    ;;   (setq-default org-download-image-dir "~/Dropbox/org/images")
    ;;   )
    ;; set defauly img width in org
    ;; (setq org-image-actual-width 450)


    ;; (defun after-org-mode-loaded()
    ;;   (setq org-download-heading-lvl nil)
    ;;   (if buffer-file-name
    ;;       (let ((org-img-base-folder "~/Dropbox/org/images")
    ;;             (img-folder (format "%s/%s" org-img-base-folder (file-name-base buffer-file-name))))
    ;;         (setq-local org-download-image-dir img-folder))
    ;;     ))

  #+END_SRC
* org-publish
#+BEGIN_SRC emacs-lisp
  ;; use htmlize
  (use-package htmlize
    :ensure t)
  (require 'ox-publish)
  (require 'ox-html)
  (require 'ox-md)

#+END_SRC
* Try
  using 'try'
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which key
  using 'which-key', can display available key in mini-buffer
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* flex-matching
  enabele flex-matching
  #+BEGIN_SRC emacs-lisp
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC

* use ace-window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	;;change faces of ace-window
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC

* useing counsel and swiper
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package swiper
      :ensure try
      :bind(("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* use invy
avy can do like ace-window, it let your choose a character to swip.
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind("M-s" . avy-goto-char))
  #+END_SRC

* useing auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC

* use color theme
;;(use-package color-theme
;;  :ensure t)
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Python
  jedi is complete package for python.

  It combines and configures a number of other packages, both written
  in Emacs Lisp as well as Python.
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
          (elpy-enable))

    ;;(setq python-shell-interpreter "~/.pyenv/shims/python")

    (use-package pyenv-mode
      :ensure t)

    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
          (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package exec-path-from-shell
      :ensure t
      :init
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize)))
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))


  #+END_SRC

* Web mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django"    . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)) ; this fixes the quote problem I mentioned

  #+END_SRC
* emment
- emment是一个html开发工具，可以自动补全标签。用法可以在
  [[https://github.com/smihica/emmet-mode][Github-emmet-mode]]查看。
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )
#+END_SRC
* ibuffer
ibuffer也是一个emacs的自带package，有很多特性，可以在ibuffer里面按h来
查看有哪些。还增加了些配置让ibuffer更好用，比如关闭kill提示，和按文件
分类显示。
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))

                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC
* insert time
#+BEGIN_SRC emacs-lisp
  ;; (defun now ()
  ;;   "Insert string for the current time formatted like '2:34 PM' or 1507121460"
  ;;   (interactive)                 ; permit invocation in minibuffer
  ;;   ;;(insert (format-time-string "%D %-I:%M %p")))
  ;;   (insert (format-time-string "%-I:%M %p")))
  ;;   ;;(insert (format-time-string "%02y%02m%02d%02H%02M%02S")))
  ;;   ;;(insert (format-time-string "%02y%02m%02d%02H%02M")))

  ;; (global-set-key "\C-xt" 'now)
#+END_SRC
* deft 
#+BEGIN_SRC emacs-lisp
  ;;deft emacs
  ;; (use-package deft
  ;;   :ensure t
  ;;   :bind ("C-c d" . deft)
  ;;   :commands (deft)
  ;;   :init (setq deft-directory "~/Dropbox/org/notes"
  ;;               deft-extensions '("org")
  ;;               deft-text-mode 'org-mode
  ;;               deft-recursive t
  ;;               deft-file-naming-rules '((noslash . "-"))
  ;;               deft-text-mode 'org-mode
  ;;               deft-use-filter-string-for-filename t
  ;;               deft-strip-summary-regexp
  ;;               (concat "\\("
  ;;                       "[\n\t]" ;; blank
  ;;                       "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
  ;;                       "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
  ;;                       "\\)")))

#+END_SRC
* cnfonts
解决中英文字体混排
#+BEGIN_SRC emacs-lisp
  ;;(setq fonts
  ;;      (cond ((eq system-type 'darwin)     '("Monaco"    "STHeiti"))
  ;;            ((eq system-type 'gnu/linux)  '("Menlo"     "STHeiti"))
  ;;            ((eq system-type 'windows-nt) '("Consolas"  "Microsoft Yahei"))))
  ;;(set-face-attribute 'default nil :font
  ;;                    (format "%s:pixelsize=%d" (car fonts) 14))
  ;;(dolist (charset '(kana han symbol cjk-misc bopomofo))
  ;;  (set-fontset-font (frame-parameter nil 'font) charset
  ;;                    (font-spec :family (car (cdr fonts)))))
  ;;Fix chinese font width and rescale
  ;;(setq face-font-rescale-alist '(("Microsoft Yahei" . 1.2) ("WenQuanYi Micro HeiMono" . 1.2) ("STHeiti". 1.2)))
#+END_SRC

