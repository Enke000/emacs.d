#+STARTUP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  ;;hide startup massage
  (setq inhibit-startup-message t)
  ;; close backup 
  (setq make-backup-files nil)
  ;;hide tool bar
  (tool-bar-mode -1)
  ;; use y-n-p over yes-no-p
  (fset 'yes-or-no-p 'y-or-n-p)
  ;;reload buffer use F5
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;;list buffers
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

* Try
  using 'try'
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which key
  using 'which-key', can display available key in mini-buffer
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* flex-matching
  enabele flex-matching
  #+BEGIN_SRC emacs-lisp
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC

* org-mode stuff
  useing org-bullets, can show outline as bullets in org-mode

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))
  #+END_SRC

* use ace-window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	;;change faces of ace-window
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC

* useing counsel and swiper
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package swiper
      :ensure try
      :bind(("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* use invy
avy can do like ace-window, it let your choose a character to swip.
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind("M-s" . avy-goto-char))
  #+END_SRC

* useing auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC

* use color theme
;;(use-package color-theme
;;  :ensure t)

* use zenburn theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))
  #+END_SRC
* install htmlize
  #+BEGIN_SRC emacs-lisp
    ;;(use-package htmlize
      ;;:ensure t)

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Python
  jedi is complete package for python.

  It combines and configures a number of other packages, both written
  in Emacs Lisp as well as Python.
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package elpy
      :ensure t
      :config
      (elpy-enable))
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))


  #+END_SRC
* Misc packages
  - global-hl-line-mode highlight the line.
  - beacon find cursor easier.
  - hungry-delete can delete all black.
  - expand region make selete easier, use C-= to expand selete area.
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ;;(setq beacon-color "#666600")
      )

    (setq save-interprogram-paste-before-kill t)

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)
  #+END_SRC

